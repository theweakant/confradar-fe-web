"use client";


import React, { useState } from 'react';
import { Settings, Bell, Shield, Database, Mail, Globe, Zap, Users, Search, Save, RotateCcw } from 'lucide-react';
import { Alert, AlertDescription } from '@/components/ui/alert';

// üîÑ REUSABLE: SettingSection - Component wrapper cho m·ªói section c·∫•u h√¨nh
interface SettingSectionProps {
  icon: React.ReactNode;
  title: string;
  description: string;
  children: React.ReactNode;
}

function SettingSection({ icon, title, description, children }: SettingSectionProps) {
  return (
    <div className="bg-white rounded-lg border border-gray-200 overflow-hidden">
      <div className="bg-gradient-to-r from-blue-50 to-indigo-50 px-6 py-4 border-b border-gray-200">
        <div className="flex items-center gap-3">
          <div className="text-blue-600">{icon}</div>
          <div>
            <h3 className="text-lg font-semibold text-gray-900">{title}</h3>
            <p className="text-sm text-gray-600 mt-0.5">{description}</p>
          </div>
        </div>
      </div>
      <div className="p-6 space-y-4">
        {children}
      </div>
    </div>
  );
}

// üîÑ REUSABLE: SettingItem - Component cho t·ª´ng m·ª•c c·∫•u h√¨nh
interface SettingItemProps {
  label: string;
  description?: string;
  children: React.ReactNode;
}

function SettingItem({ label, description, children }: SettingItemProps) {
  return (
    <div className="flex items-start justify-between py-3 border-b border-gray-100 last:border-0">
      <div className="flex-1 pr-4">
        <label className="text-sm font-medium text-gray-700 block">{label}</label>
        {description && <p className="text-xs text-gray-500 mt-1">{description}</p>}
      </div>
      <div className="flex-shrink-0">
        {children}
      </div>
    </div>
  );
}

// üîÑ REUSABLE: ToggleSwitch - Component toggle switch
interface ToggleSwitchProps {
  checked: boolean;
  onChange: (checked: boolean) => void;
  disabled?: boolean;
}

function ToggleSwitch({ checked, onChange, disabled }: ToggleSwitchProps) {
  return (
    <button
      onClick={() => !disabled && onChange(!checked)}
      disabled={disabled}
      className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 ${
        checked ? 'bg-blue-600' : 'bg-gray-300'
      } ${disabled ? 'opacity-50 cursor-not-allowed' : 'cursor-pointer'}`}
    >
      <span
        className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${
          checked ? 'translate-x-6' : 'translate-x-1'
        }`}
      />
    </button>
  );
}

// üîÑ REUSABLE: SelectInput - Component select dropdown
interface SelectInputProps {
  value: string;
  onChange: (value: string) => void;
  options: { value: string; label: string }[];
  disabled?: boolean;
}

function SelectInput({ value, onChange, options, disabled }: SelectInputProps) {
  return (
    <select
      value={value}
      onChange={(e) => onChange(e.target.value)}
      disabled={disabled}
      className="px-3 py-1.5 text-sm border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed"
    >
      {options.map((option) => (
        <option key={option.value} value={option.value}>
          {option.label}
        </option>
      ))}
    </select>
  );
}

// üîÑ REUSABLE: TextInput - Component text input
interface TextInputProps {
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  disabled?: boolean;
  type?: string;
}

function TextInput({ value, onChange, placeholder, disabled, type = 'text' }: TextInputProps) {
  return (
    <input
      type={type}
      value={value}
      onChange={(e) => onChange(e.target.value)}
      placeholder={placeholder}
      disabled={disabled}
      className="px-3 py-1.5 text-sm border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed min-w-[200px]"
    />
  );
}

export default function SystemSetting() {
  const [saveAlert, setSaveAlert] = useState(false);
  const [activeTab, setActiveTab] = useState('general');

  // State cho General Settings
  const [appName, setAppName] = useState('ConfRadar');
  const [appUrl, setAppUrl] = useState('https://confradar.app');
  const [defaultLanguage, setDefaultLanguage] = useState('vi');
  const [timezone, setTimezone] = useState('Asia/Ho_Chi_Minh');

  // State cho Notification Settings
  const [emailNotif, setEmailNotif] = useState(true);
  const [pushNotif, setPushNotif] = useState(true);
  const [conferenceReminder, setConferenceReminder] = useState(true);
  const [newConferenceAlert, setNewConferenceAlert] = useState(true);
  const [reminderTime, setReminderTime] = useState('24');

  // State cho Security Settings
  const [twoFactorAuth, setTwoFactorAuth] = useState(false);
  const [sessionTimeout, setSessionTimeout] = useState('30');
  const [passwordPolicy, setPasswordPolicy] = useState('medium');
  const [apiRateLimit, setApiRateLimit] = useState('1000');

  // State cho Database Settings
  const [autoBackup, setAutoBackup] = useState(true);
  const [backupFrequency, setBackupFrequency] = useState('daily');
  const [retentionDays, setRetentionDays] = useState('30');
  const [dbOptimization, setDbOptimization] = useState(true);

  // State cho Email Settings
  const [smtpHost, setSmtpHost] = useState('smtp.gmail.com');
  const [smtpPort, setSmtpPort] = useState('587');
  const [smtpUser, setSmtpUser] = useState('');
  const [emailFrom, setEmailFrom] = useState('noreply@confradar.app');

  // State cho Search & Indexing
  const [autoIndex, setAutoIndex] = useState(true);
  const [indexFrequency, setIndexFrequency] = useState('hourly');
  const [searchSuggestion, setSearchSuggestion] = useState(true);
  const [fuzzySearch, setFuzzySearch] = useState(true);

  // State cho API & Integration
  const [apiEnabled, setApiEnabled] = useState(true);
  const [webhookEnabled, setWebhookEnabled] = useState(false);
  const [corsEnabled, setCorsEnabled] = useState(true);
  const [apiVersion, setApiVersion] = useState('v1');

  // State cho User Management
  const [autoApproval, setAutoApproval] = useState(false);
  const [maxLoginAttempts, setMaxLoginAttempts] = useState('5');
  const [accountLockDuration, setAccountLockDuration] = useState('30');

  const handleSave = () => {
    setSaveAlert(true);
    setTimeout(() => setSaveAlert(false), 3000);
  };

  const handleReset = () => {
    if (confirm('B·∫°n c√≥ ch·∫Øc mu·ªën kh√¥i ph·ª•c c·∫•u h√¨nh m·∫∑c ƒë·ªãnh?')) {
      // Reset logic here
      setSaveAlert(true);
      setTimeout(() => setSaveAlert(false), 3000);
    }
  };

  const tabs = [
    { id: 'general', label: 'Chung', icon: <Settings className="w-4 h-4" /> },
    { id: 'notification', label: 'Th√¥ng b√°o', icon: <Bell className="w-4 h-4" /> },
    { id: 'security', label: 'B·∫£o m·∫≠t', icon: <Shield className="w-4 h-4" /> },
    { id: 'database', label: 'C∆° s·ªü d·ªØ li·ªáu', icon: <Database className="w-4 h-4" /> },
    { id: 'email', label: 'Email', icon: <Mail className="w-4 h-4" /> },
    { id: 'search', label: 'T√¨m ki·∫øm', icon: <Search className="w-4 h-4" /> },
    { id: 'api', label: 'API', icon: <Zap className="w-4 h-4" /> },
    { id: 'user', label: 'Ng∆∞·ªùi d√πng', icon: <Users className="w-4 h-4" /> },
  ];

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <div className="bg-white border-b border-gray-200 sticky top-0 z-10">
        <div className="max-w-7xl mx-auto px-6 py-4">
          <div className="flex items-center justify-between">
            <div>
              <h1 className="text-2xl font-bold text-gray-900">C·∫•u h√¨nh H·ªá th·ªëng</h1>
              <p className="text-sm text-gray-600 mt-1">Qu·∫£n l√Ω c·∫•u h√¨nh v√† thi·∫øt l·∫≠p cho ConfRadar</p>
            </div>
            <div className="flex gap-3">
              <button
                onClick={handleReset}
                className="flex items-center gap-2 px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors"
              >
                <RotateCcw className="w-4 h-4" />
                Kh√¥i ph·ª•c m·∫∑c ƒë·ªãnh
              </button>
              <button
                onClick={handleSave}
                className="flex items-center gap-2 px-4 py-2 text-sm font-medium text-white bg-blue-600 rounded-lg hover:bg-blue-700 transition-colors"
              >
                <Save className="w-4 h-4" />
                L∆∞u thay ƒë·ªïi
              </button>
            </div>
          </div>
        </div>
      </div>

      <div className="max-w-7xl mx-auto px-6 py-6">
        {saveAlert && (
          <Alert className="mb-6 border-green-200 bg-green-50">
            <AlertDescription className="text-green-800">
              ‚úì ƒê√£ l∆∞u c·∫•u h√¨nh th√†nh c√¥ng!
            </AlertDescription>
          </Alert>
        )}

        {/* Tabs Navigation */}
        <div className="bg-white rounded-lg border border-gray-200 p-2 mb-6">
          <div className="flex flex-wrap gap-2">
            {tabs.map((tab) => (
              <button
                key={tab.id}
                onClick={() => setActiveTab(tab.id)}
                className={`flex items-center gap-2 px-4 py-2 text-sm font-medium rounded-md transition-colors ${
                  activeTab === tab.id
                    ? 'bg-blue-600 text-white'
                    : 'text-gray-700 hover:bg-gray-100'
                }`}
              >
                {tab.icon}
                {tab.label}
              </button>
            ))}
          </div>
        </div>

        {/* Settings Content */}
        <div className="space-y-6">
          {activeTab === 'general' && (
            <SettingSection
              icon={<Settings className="w-6 h-6" />}
              title="C·∫•u h√¨nh Chung"
              description="Thi·∫øt l·∫≠p th√¥ng tin c∆° b·∫£n c·ªßa h·ªá th·ªëng"
            >
              <SettingItem label="T√™n ·ª©ng d·ª•ng" description="T√™n hi·ªÉn th·ªã c·ªßa ConfRadar">
                <TextInput value={appName} onChange={setAppName} placeholder="ConfRadar" />
              </SettingItem>
              <SettingItem label="URL ·ª©ng d·ª•ng" description="ƒê·ªãa ch·ªâ web ch√≠nh c·ªßa ·ª©ng d·ª•ng">
                <TextInput value={appUrl} onChange={setAppUrl} placeholder="https://confradar.app" />
              </SettingItem>
              <SettingItem label="Ng√¥n ng·ªØ m·∫∑c ƒë·ªãnh" description="Ng√¥n ng·ªØ hi·ªÉn th·ªã cho ng∆∞·ªùi d√πng m·ªõi">
                <SelectInput
                  value={defaultLanguage}
                  onChange={setDefaultLanguage}
                  options={[
                    { value: 'vi', label: 'Ti·∫øng Vi·ªát' },
                    { value: 'en', label: 'English' },
                    { value: 'ja', label: 'Êó•Êú¨Ë™û' },
                  ]}
                />
              </SettingItem>
              <SettingItem label="M√∫i gi·ªù" description="M√∫i gi·ªù m·∫∑c ƒë·ªãnh cho h·ªá th·ªëng">
                <SelectInput
                  value={timezone}
                  onChange={setTimezone}
                  options={[
                    { value: 'Asia/Ho_Chi_Minh', label: 'Asia/Ho Chi Minh (GMT+7)' },
                    { value: 'Asia/Tokyo', label: 'Asia/Tokyo (GMT+9)' },
                    { value: 'America/New_York', label: 'America/New York (GMT-5)' },
                  ]}
                />
              </SettingItem>
            </SettingSection>
          )}

          {activeTab === 'notification' && (
            <SettingSection
              icon={<Bell className="w-6 h-6" />}
              title="C·∫•u h√¨nh Th√¥ng b√°o"
              description="Qu·∫£n l√Ω c√°c lo·∫°i th√¥ng b√°o v√† nh·∫Øc nh·ªü"
            >
              <SettingItem label="Th√¥ng b√°o Email" description="G·ª≠i th√¥ng b√°o qua email">
                <ToggleSwitch checked={emailNotif} onChange={setEmailNotif} />
              </SettingItem>
              <SettingItem label="Th√¥ng b√°o Push" description="Hi·ªÉn th·ªã th√¥ng b√°o tr√™n tr√¨nh duy·ªát">
                <ToggleSwitch checked={pushNotif} onChange={setPushNotif} />
              </SettingItem>
              <SettingItem label="Nh·∫Øc nh·ªü h·ªôi th·∫£o" description="T·ª± ƒë·ªông nh·∫Øc ng∆∞·ªùi d√πng tr∆∞·ªõc khi h·ªôi th·∫£o di·ªÖn ra">
                <ToggleSwitch checked={conferenceReminder} onChange={setConferenceReminder} />
              </SettingItem>
              <SettingItem label="Th·ªùi gian nh·∫Øc tr∆∞·ªõc" description="S·ªë gi·ªù nh·∫Øc tr∆∞·ªõc khi h·ªôi th·∫£o b·∫Øt ƒë·∫ßu">
                <SelectInput
                  value={reminderTime}
                  onChange={setReminderTime}
                  options={[
                    { value: '1', label: '1 gi·ªù' },
                    { value: '6', label: '6 gi·ªù' },
                    { value: '24', label: '24 gi·ªù' },
                    { value: '48', label: '48 gi·ªù' },
                  ]}
                  disabled={!conferenceReminder}
                />
              </SettingItem>
              <SettingItem label="Th√¥ng b√°o h·ªôi th·∫£o m·ªõi" description="Th√¥ng b√°o khi c√≥ h·ªôi th·∫£o m·ªõi ƒë∆∞·ª£c ƒëƒÉng">
                <ToggleSwitch checked={newConferenceAlert} onChange={setNewConferenceAlert} />
              </SettingItem>
            </SettingSection>
          )}

          {activeTab === 'security' && (
            <SettingSection
              icon={<Shield className="w-6 h-6" />}
              title="C·∫•u h√¨nh B·∫£o m·∫≠t"
              description="Thi·∫øt l·∫≠p c√°c ch√≠nh s√°ch b·∫£o m·∫≠t h·ªá th·ªëng"
            >
              <SettingItem label="X√°c th·ª±c 2 y·∫øu t·ªë" description="Y√™u c·∫ßu m√£ x√°c th·ª±c b·ªï sung khi ƒëƒÉng nh·∫≠p">
                <ToggleSwitch checked={twoFactorAuth} onChange={setTwoFactorAuth} />
              </SettingItem>
              <SettingItem label="Th·ªùi gian h·∫øt phi√™n" description="Ph√∫t kh√¥ng ho·∫°t ƒë·ªông tr∆∞·ªõc khi ƒëƒÉng xu·∫•t t·ª± ƒë·ªông">
                <SelectInput
                  value={sessionTimeout}
                  onChange={setSessionTimeout}
                  options={[
                    { value: '15', label: '15 ph√∫t' },
                    { value: '30', label: '30 ph√∫t' },
                    { value: '60', label: '60 ph√∫t' },
                    { value: '120', label: '120 ph√∫t' },
                  ]}
                />
              </SettingItem>
              <SettingItem label="Ch√≠nh s√°ch m·∫≠t kh·∫©u" description="ƒê·ªô m·∫°nh y√™u c·∫ßu cho m·∫≠t kh·∫©u">
                <SelectInput
                  value={passwordPolicy}
                  onChange={setPasswordPolicy}
                  options={[
                    { value: 'low', label: 'Th·∫•p (8 k√Ω t·ª±)' },
                    { value: 'medium', label: 'Trung b√¨nh (10 k√Ω t·ª± + s·ªë)' },
                    { value: 'high', label: 'Cao (12 k√Ω t·ª± + s·ªë + k√Ω t·ª± ƒë·∫∑c bi·ªát)' },
                  ]}
                />
              </SettingItem>
              <SettingItem label="Gi·ªõi h·∫°n API" description="S·ªë request t·ªëi ƒëa m·ªói gi·ªù">
                <TextInput value={apiRateLimit} onChange={setApiRateLimit} placeholder="1000" type="number" />
              </SettingItem>
            </SettingSection>
          )}

          {activeTab === 'database' && (
            <SettingSection
              icon={<Database className="w-6 h-6" />}
              title="C·∫•u h√¨nh C∆° s·ªü d·ªØ li·ªáu"
              description="Qu·∫£n l√Ω sao l∆∞u v√† t·ªëi ∆∞u h√≥a database"
            >
              <SettingItem label="T·ª± ƒë·ªông sao l∆∞u" description="T·ª± ƒë·ªông sao l∆∞u d·ªØ li·ªáu theo l·ªãch">
                <ToggleSwitch checked={autoBackup} onChange={setAutoBackup} />
              </SettingItem>
              <SettingItem label="T·∫ßn su·∫•t sao l∆∞u" description="Chu k·ª≥ th·ª±c hi·ªán sao l∆∞u">
                <SelectInput
                  value={backupFrequency}
                  onChange={setBackupFrequency}
                  options={[
                    { value: 'hourly', label: 'M·ªói gi·ªù' },
                    { value: 'daily', label: 'H√†ng ng√†y' },
                    { value: 'weekly', label: 'H√†ng tu·∫ßn' },
                  ]}
                  disabled={!autoBackup}
                />
              </SettingItem>
              <SettingItem label="Th·ªùi gian l∆∞u tr·ªØ" description="S·ªë ng√†y gi·ªØ b·∫£n sao l∆∞u">
                <TextInput value={retentionDays} onChange={setRetentionDays} placeholder="30" type="number" />
              </SettingItem>
              <SettingItem label="T·ªëi ∆∞u h√≥a t·ª± ƒë·ªông" description="T·ª± ƒë·ªông t·ªëi ∆∞u v√† d·ªçn d·∫πp database">
                <ToggleSwitch checked={dbOptimization} onChange={setDbOptimization} />
              </SettingItem>
            </SettingSection>
          )}

          {activeTab === 'email' && (
            <SettingSection
              icon={<Mail className="w-6 h-6" />}
              title="C·∫•u h√¨nh Email"
              description="Thi·∫øt l·∫≠p m√°y ch·ªß email v√† th√¥ng tin g·ª≠i"
            >
              <SettingItem label="SMTP Host" description="ƒê·ªãa ch·ªâ m√°y ch·ªß email">
                <TextInput value={smtpHost} onChange={setSmtpHost} placeholder="smtp.gmail.com" />
              </SettingItem>
              <SettingItem label="SMTP Port" description="C·ªïng k·∫øt n·ªëi SMTP">
                <TextInput value={smtpPort} onChange={setSmtpPort} placeholder="587" type="number" />
              </SettingItem>
              <SettingItem label="SMTP Username" description="T√†i kho·∫£n ƒëƒÉng nh·∫≠p SMTP">
                <TextInput value={smtpUser} onChange={setSmtpUser} placeholder="user@example.com" />
              </SettingItem>
              <SettingItem label="Email ng∆∞·ªùi g·ª≠i" description="ƒê·ªãa ch·ªâ email hi·ªÉn th·ªã khi g·ª≠i">
                <TextInput value={emailFrom} onChange={setEmailFrom} placeholder="noreply@confradar.app" />
              </SettingItem>
            </SettingSection>
          )}

          {activeTab === 'search' && (
            <SettingSection
              icon={<Search className="w-6 h-6" />}
              title="C·∫•u h√¨nh T√¨m ki·∫øm"
              description="T·ªëi ∆∞u h√≥a c√¥ng c·ª• t√¨m ki·∫øm v√† ƒë√°nh index"
            >
              <SettingItem label="T·ª± ƒë·ªông ƒë√°nh index" description="T·ª± ƒë·ªông c·∫≠p nh·∫≠t index khi c√≥ thay ƒë·ªïi">
                <ToggleSwitch checked={autoIndex} onChange={setAutoIndex} />
              </SettingItem>
              <SettingItem label="T·∫ßn su·∫•t ƒë√°nh index" description="Chu k·ª≥ c·∫≠p nh·∫≠t index">
                <SelectInput
                  value={indexFrequency}
                  onChange={setIndexFrequency}
                  options={[
                    { value: 'realtime', label: 'Th·ªùi gian th·ª±c' },
                    { value: 'hourly', label: 'M·ªói gi·ªù' },
                    { value: 'daily', label: 'H√†ng ng√†y' },
                  ]}
                  disabled={!autoIndex}
                />
              </SettingItem>
              <SettingItem label="G·ª£i √Ω t√¨m ki·∫øm" description="Hi·ªÉn th·ªã g·ª£i √Ω khi ng∆∞·ªùi d√πng nh·∫≠p">
                <ToggleSwitch checked={searchSuggestion} onChange={setSearchSuggestion} />
              </SettingItem>
              <SettingItem label="T√¨m ki·∫øm m·ªù" description="Cho ph√©p t√¨m ki·∫øm v·ªõi l·ªói ch√≠nh t·∫£">
                <ToggleSwitch checked={fuzzySearch} onChange={setFuzzySearch} />
              </SettingItem>
            </SettingSection>
          )}

          {activeTab === 'api' && (
            <SettingSection
              icon={<Zap className="w-6 h-6" />}
              title="C·∫•u h√¨nh API & T√≠ch h·ª£p"
              description="Qu·∫£n l√Ω API v√† c√°c t√≠ch h·ª£p b√™n ngo√†i"
            >
              <SettingItem label="K√≠ch ho·∫°t API" description="Cho ph√©p truy c·∫≠p API c√¥ng khai">
                <ToggleSwitch checked={apiEnabled} onChange={setApiEnabled} />
              </SettingItem>
              <SettingItem label="Phi√™n b·∫£n API" description="Phi√™n b·∫£n API hi·ªán t·∫°i">
                <SelectInput
                  value={apiVersion}
                  onChange={setApiVersion}
                  options={[
                    { value: 'v1', label: 'v1' },
                    { value: 'v2', label: 'v2 (Beta)' },
                  ]}
                  disabled={!apiEnabled}
                />
              </SettingItem>
              <SettingItem label="Webhook" description="Cho ph√©p g·ª≠i s·ª± ki·ªán qua webhook">
                <ToggleSwitch checked={webhookEnabled} onChange={setWebhookEnabled} />
              </SettingItem>
              <SettingItem label="CORS" description="Cho ph√©p truy c·∫≠p t·ª´ domain kh√°c">
                <ToggleSwitch checked={corsEnabled} onChange={setCorsEnabled} />
              </SettingItem>
            </SettingSection>
          )}

          {activeTab === 'user' && (
            <SettingSection
              icon={<Users className="w-6 h-6" />}
              title="C·∫•u h√¨nh Qu·∫£n l√Ω Ng∆∞·ªùi d√πng"
              description="Thi·∫øt l·∫≠p ch√≠nh s√°ch v√† h√†nh vi ng∆∞·ªùi d√πng"
            >
              <SettingItem label="T·ª± ƒë·ªông ph√™ duy·ªát" description="T·ª± ƒë·ªông k√≠ch ho·∫°t t√†i kho·∫£n m·ªõi ƒëƒÉng k√Ω">
                <ToggleSwitch checked={autoApproval} onChange={setAutoApproval} />
              </SettingItem>
              <SettingItem label="S·ªë l·∫ßn ƒëƒÉng nh·∫≠p sai" description="S·ªë l·∫ßn cho ph√©p nh·∫≠p sai m·∫≠t kh·∫©u">
                <TextInput value={maxLoginAttempts} onChange={setMaxLoginAttempts} placeholder="5" type="number" />
              </SettingItem>
              <SettingItem label="Th·ªùi gian kh√≥a t√†i kho·∫£n" description="Ph√∫t kh√≥a t√†i kho·∫£n khi ƒëƒÉng nh·∫≠p sai qu√° nhi·ªÅu">
                <TextInput value={accountLockDuration} onChange={setAccountLockDuration} placeholder="30" type="number" />
              </SettingItem>
            </SettingSection>
          )}
        </div>
      </div>
    </div>
  );
}